name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - feature-branchA

env:
  MONGO_URI: ${{ vars.MONGO_URI}}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest ,windows-latest]
        nodejs-version: [18, 19, 20]

        exclude:
          - os: macos-latest
            nodejs-version: 18

    runs-on: ${{ matrix.os }}

    steps: 
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js version - ${{ matrix.nodejs-version }}
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ matrix.nodejs-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        id: nodejs-unit-testing-run-tests
        run: npm test

      - name: Archive test results
        if: steps.nodejs-unit-testing-run-tests.outcome == 'success' || steps.nodejs-unit-testing-run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: mocha-test-results-${{ matrix.os }}-${{ matrix.nodejs-version }}
          path: test-results.xml
  
  code-coverage:
    name: Code Coverage
    needs: unit-testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run code coverage 
        continue-on-error: true
        run: npm run coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: code-coverage-results
          path: coverage
          retention-days: 5

  docker-build:
    name: Docker Build
    needs: code-coverage
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker file
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/solar-system

      - name: Test Docker image
        run: |  
          docker images
          docker run --rm --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          -e MONGO_URI=$MONGO_URI \
          ${{ vars.DOCKER_USERNAME }}/solar-system
          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep  live

      - name: Build Docker file
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}
            ghcr.io/${{ github.repository_owner }}/solar-system

    terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest 
    needs: docker-build
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: hashicorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "1.1.7"

      - name: Terraform Init
        run: terraform init 
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

  deploy:
    name: Deploy to EKS
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name solar-system-cluster


      - name: Trigger App Deployment
        uses: statsig-io/kubectl-via-eksctl@main
        env:
         aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws_region: us-east-1
         cluster: stage-eks-cluster

      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
        working-directory: ./kubernetes

